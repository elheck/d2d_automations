name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libgtk-3-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libx11-dev \
            libwayland-dev \
            libxcb-randr0-dev \
            libxcb-ewmh-dev \
            libxcb-icccm4-dev \
            libxcursor-dev \
            libfontconfig1-dev \
            libfreetype6-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            check_stock/target
            accounting/target
          key: ${{ runner.os }}-test-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Test check_stock
        run: |
          cd check_stock
          echo "Running check_stock tests..."
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose --all-targets
          cargo test --doc --verbose
          echo "check_stock tests completed successfully"

      - name: Test accounting
        run: |
          cd accounting
          echo "Running accounting tests..."
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose --all-targets
          cargo test --doc --verbose
          echo "accounting tests completed successfully"

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          # Check Stock builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            project: check_stock
            artifact_name: d2d_automations
            asset_name: d2d_automations-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            project: check_stock
            artifact_name: d2d_automations.exe
            asset_name: d2d_automations-windows-amd64.exe
          # Accounting builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            project: accounting
            artifact_name: sevdesk_invoicing
            asset_name: sevdesk-invoicing-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            project: accounting
            artifact_name: sevdesk_invoicing.exe
            asset_name: sevdesk-invoicing-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install System Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libgtk-3-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libx11-dev \
            libwayland-dev \
            libxcb-randr0-dev \
            libxcb-ewmh-dev \
            libxcb-icccm4-dev \
            libxcursor-dev \
            libfontconfig1-dev \
            libfreetype6-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ matrix.project }}/target
          key: ${{ runner.os }}-${{ matrix.project }}-cargo-${{ hashFiles(format('{0}/Cargo.lock', matrix.project)) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.project }}-cargo-

      - name: Run tests before build
        timeout-minutes: 15
        run: |
          cd ${{ matrix.project }}
          echo "Running tests for ${{ matrix.project }} on ${{ matrix.os }}..."
          cargo test --verbose --all-targets --target ${{ matrix.target }}
          echo "All tests passed for ${{ matrix.project }}"

      - name: Build
        timeout-minutes: 30
        run: |
          cd ${{ matrix.project }}
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Verify Build Output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd ${{ matrix.project }}/target/${{ matrix.target }}/release/
          if (-not (Test-Path "${{ matrix.artifact_name }}")) {
            Write-Error "Build artifact not found!"
            exit 1
          }

      - name: Verify Build Output (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd ${{ matrix.project }}/target/${{ matrix.target }}/release/
          if [ ! -f "${{ matrix.artifact_name }}" ]; then
            echo "Build artifact not found!"
            exit 1
          fi

      - name: Prepare Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd ${{ matrix.project }}/target/${{ matrix.target }}/release/
          Compress-Archive -Path "${{ matrix.artifact_name }}" -DestinationPath "../../../${{ matrix.asset_name }}.zip"

      - name: Prepare Release Asset (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd ${{ matrix.project }}/target/${{ matrix.target }}/release/
          tar -czf "../../../${{ matrix.asset_name }}.tar.gz" "${{ matrix.artifact_name }}"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.project }}/${{ matrix.asset_name }}.*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
